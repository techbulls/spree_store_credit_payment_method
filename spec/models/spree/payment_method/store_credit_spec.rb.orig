require 'spec_helper'

describe Spree::PaymentMethod::StoreCredit do
  let(:order)           { create(:order) }
  let(:payment)         { create(:payment, order: order) }
  let(:gateway_options) { payment.gateway_options }

  context "#authorize" do
    subject do
      Spree::PaymentMethod::StoreCredit.new.authorize(auth_amount, store_credit, gateway_options)
    end

    let(:auth_amount) { store_credit.amount_remaining * 100 }
    let(:store_credit) { create(:store_credit) }
    let(:gateway_options) { super().merge(originator: originator) }
    let(:originator) { nil }

    context 'without an invalid store credit' do
      let(:store_credit) { nil }
      let(:auth_amount) { 10 }

      it "declines an unknown store credit" do
        expect(subject.success?).to be false
        subject.message.should include Spree.t('store_credit_payment_method.unable_to_find')
      end
    end

    context 'with insuffient funds' do
      let(:auth_amount) { (store_credit.amount_remaining * 100) + 1 }

      it "declines a store credit" do
        expect(subject.success?).to be false
<<<<<<< HEAD
        subject.message.should include Spree.t('store_credit_payment_method.insufficient_funds')
=======
        subject.message.should include "Store credit amount remaining is not sufficient (Amount remaining: 150.0, Amount requested: 150.01)"
>>>>>>> cfded6165fa906c0aae66c46255aeaccb614b139
      end
    end

    context 'when the currency does not match the order currency' do
      let(:store_credit) { create(:store_credit, currency: 'AUD') }

      it "declines the credit" do
        expect(subject.success?).to be false
<<<<<<< HEAD
        subject.message.should include Spree.t('store_credit_payment_method.currency_mismatch')
=======
        subject.message.should include "Store credit currency (AUD) does not match order currency (USD)"
>>>>>>> cfded6165fa906c0aae66c46255aeaccb614b139
      end
    end

    context 'with a valid request' do
      it "authorizes a valid store credit" do
        expect(subject.success?).to be true
        subject.authorization.should_not be_nil
      end

      context 'with an originator' do
        let(:originator) { double('originator') }

        it 'passes the originator' do
          Spree::StoreCredit.any_instance.should_receive(:authorize)
            .with(anything, anything, action_originator: originator)
          subject
        end
      end
    end
  end

  context "#capture" do
    subject do
      Spree::PaymentMethod::StoreCredit.new.capture(capture_amount, auth_code, gateway_options)
    end

    let(:capture_amount) { 10_00 }
    let(:auth_code) { auth_event.authorization_code }
    let(:gateway_options) { super().merge(originator: originator) }

    let(:authorized_amount) { capture_amount/100.0 }
    let(:auth_event) { create(:store_credit_auth_event, store_credit: store_credit, amount: authorized_amount) }
    let(:store_credit) { create(:store_credit, amount_authorized: authorized_amount) }
    let(:originator) { nil }

    context 'with an invalid auth code' do
      let(:auth_code) { -1 }

      it "declines an unknown store credit" do
        expect(subject.success?).to be false
        subject.message.should include Spree.t('store_credit_payment_method.unable_to_find')
      end
    end

    context 'when unable to authorize the amount' do
      let(:authorized_amount) { (capture_amount-1)/100 }

      before do
        Spree::StoreCredit.any_instance.stub(authorize: true)
      end

      it "declines a store credit" do
        expect(subject.success?).to be false
<<<<<<< HEAD
        subject.message.should include Spree.t('store_credit_payment_method.insufficient_authorized_amount')
=======
        subject.message.should include "Unable to capture more than authorized amount (10.0)"
>>>>>>> cfded6165fa906c0aae66c46255aeaccb614b139
      end
    end

    context 'when the currency does not match the order currency' do
      let(:store_credit) { create(:store_credit, currency: 'AUD', amount_authorized: authorized_amount) }

      it "declines the credit" do
        expect(subject.success?).to be false
<<<<<<< HEAD
        subject.message.should include Spree.t('store_credit_payment_method.currency_mismatch')
=======
        subject.message.should include "Store credit currency (AUD) does not match order currency (USD)"
>>>>>>> cfded6165fa906c0aae66c46255aeaccb614b139
      end
    end

    context 'with a valid request' do
      it "captures the store credit" do
        subject.message.should include Spree.t('store_credit_payment_method.successful_action', action: Spree::StoreCredit::CAPTURE_ACTION)
        expect(subject.success?).to be true
      end

      context 'with an originator' do
        let(:originator) { double('originator') }

        it 'passes the originator' do
          Spree::StoreCredit.any_instance.should_receive(:capture)
            .with(anything, anything, anything, action_originator: originator)
          subject
        end
      end
    end
  end

  context "#void" do
    subject do
      Spree::PaymentMethod::StoreCredit.new.void(auth_code, gateway_options)
    end

    let(:auth_code) { auth_event.authorization_code }
    let(:gateway_options) { super().merge(originator: originator) }
    let(:auth_event) { create(:store_credit_auth_event) }
    let(:originator) { nil }

    context 'with an invalid auth code' do
      let(:auth_code) { 1 }

      it "declines an unknown store credit" do
        expect(subject.success?).to be false
        subject.message.should include Spree.t('store_credit_payment_method.unable_to_find')
      end
    end

    context 'when the store credit is not voided successfully' do
      before { Spree::StoreCredit.any_instance.stub(void: false) }

      it "returns an error response" do
        expect(subject.success?).to be false
      end
    end

    it "voids a valid store credit void request" do
      expect(subject.success?).to be true
      subject.message.should include Spree.t('store_credit_payment_method.successful_action', action: Spree::StoreCredit::VOID_ACTION)
    end

    context 'with an originator' do
      let(:originator) { double('originator') }

      it 'passes the originator' do
        Spree::StoreCredit.any_instance.should_receive(:void)
          .with(anything, action_originator: originator)
        subject
      end
    end
  end

  context "#purchase" do
    it "declines a purchase if it can't find a pending credit for the correct amount" do
      amount = 100.0
      store_credit = create(:store_credit)
      auth_code = store_credit.generate_authorization_code
      store_credit.store_credit_events.create!(action: Spree::StoreCredit::ELIGIBLE_ACTION,
                                               amount: amount,
                                               authorization_code: auth_code)
      store_credit.store_credit_events.create!(action: Spree::StoreCredit::CAPTURE_ACTION,
                                               amount: amount,
                                               authorization_code: auth_code)

      resp = subject.purchase(amount * 100.0, store_credit, gateway_options)
      expect(resp.success?).to be false
      resp.message.should include Spree.t('store_credit_payment_method.unable_to_find')
    end

    it "captures a purchase if it can find a pending credit for the correct amount" do
      amount = 100.0
      store_credit = create(:store_credit)
      auth_code = store_credit.generate_authorization_code
      store_credit.store_credit_events.create!(action: Spree::StoreCredit::ELIGIBLE_ACTION,
                                               amount: amount,
                                               authorization_code: auth_code)

      resp = subject.purchase(amount * 100.0, store_credit, gateway_options)
      expect(resp.success?).to be true
      resp.message.should include Spree.t('store_credit_payment_method.successful_action', action: Spree::StoreCredit::CAPTURE_ACTION)
    end
  end

  context "#credit" do
    subject do
      Spree::PaymentMethod::StoreCredit.new.credit(credit_amount, auth_code, gateway_options)
    end

    let(:credit_amount) { 100.0 }
    let(:auth_code) { auth_event.authorization_code }
    let(:gateway_options) { super().merge(originator: originator) }
    let(:auth_event) { create(:store_credit_auth_event) }
    let(:originator) { nil }

    context 'with an invalid auth code' do
      let(:auth_code) { 1 }

      it "declines an unknown store credit" do
        expect(subject.success?).to be false
        subject.message.should include Spree.t('store_credit_payment_method.unable_to_find')
      end
    end

    context "when the store credit isn't credited successfully" do
      before { Spree::StoreCredit.any_instance.stub(credit: false) }

      it "returns an error response" do
        expect(subject.success?).to be false
      end
    end

    context 'with a valid credit request' do
      before { Spree::StoreCredit.any_instance.stub(credit: true) }

      it "credits a valid store credit credit request" do
        expect(subject.success?).to be true
        subject.message.should include Spree.t('store_credit_payment_method.successful_action', action: Spree::StoreCredit::CREDIT_ACTION)
      end
    end

    context 'with an originator' do
      let(:originator) { double('originator') }

      it 'passes the originator' do
        Spree::StoreCredit.any_instance.should_receive(:credit)
          .with(anything, anything, anything, action_originator: originator)
        subject
      end
    end
  end
end
